{
  "address": "0x9ebFfBfF99Fd4c5f1Fe2dddcFB2C499915bb9042",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceSnapshots",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Mining3.Snapshots",
          "name": "snapshots",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "snapshotIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchEarningSum",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earningToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "earningPerToken",
          "type": "uint256"
        }
      ],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "earningTokenToSet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startSnapshotId",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastFinalizedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "lastWithdrawAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa2913ae96013dadf016634c29acafb5303c0324a9d240b34e3369bee494e9e48",
  "receipt": {
    "to": null,
    "from": "0xa4b368e3a9D49Ff15b58f70Fb976724A98B6D149",
    "contractAddress": "0x9ebFfBfF99Fd4c5f1Fe2dddcFB2C499915bb9042",
    "transactionIndex": 6,
    "gasUsed": "3815381",
    "logsBloom": "0x
    "blockHash": "0x517703a6b39addb6d03353f393898da7e9f2d5456d9c5a95f028c388a468519d",
    "transactionHash": "0xa2913ae96013dadf016634c29acafb5303c0324a9d240b34e3369bee494e9e48",
    "logs": [],
    "blockNumber": 17428971,
    "cumulativeGasUsed": "7368266",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "29a4d3e970f13c29128f5739a64568ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceSnapshots\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Mining3.Snapshots\",\"name\":\"snapshots\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"snapshotIds\",\"type\":\"uint256[]\"}],\"name\":\"batchEarningSum\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earningToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"earningPerToken\",\"type\":\"uint256\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"earningTokenToSet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startSnapshotId\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFinalizedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lastWithdrawAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Mining3.sol\":\"Mining3\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7160017c8d2373a33a6d7e45368d60d7d582ea1695a098de8356c94dab2ec3ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa7bc891be2bc5948340a8fb14ad36c8846230c9086269e37f3febf0dc239c9f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/Mining3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract Mining3 is\\n    Initializable,\\n    ERC20Upgradeable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable\\n{\\n    using Arrays for uint256[];\\n    using SafeERC20 for IERC20;\\n\\n    struct Withdrawal {\\n        uint256 snapshotId;\\n        uint256 index;\\n    }\\n\\n    address private _earningToken;\\n    uint256 private _finalized;\\n    mapping(address => Withdrawal) _withdrawal;\\n    mapping(uint256 => uint256) _earningSum;\\n\\n    struct Snapshots {\\n        uint256[] ids;\\n        uint256[] values;\\n    }\\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\\n    Snapshots private _totalSupplySnapshots;\\n\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address earningTokenToSet,\\n        uint startSnapshotId\\n    ) external initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ERC20_init(name, symbol);\\n        _earningToken = earningTokenToSet;\\n        _finalized = startSnapshotId;\\n    }\\n\\n    function burn(uint256 amount) external onlyOwner {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    function mint(address to, uint256 amount) external onlyOwner {\\n        _mint(to, amount);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function finalize(uint256 earningPerToken) external onlyOwner {\\n        uint256 snapshotId = _finalized + 86400;\\n        uint256 currentSnapshotId = _getCurrentSnapshotId();\\n        require(\\n            snapshotId <= currentSnapshotId,\\n            'Mining3: all snapshots finalized'\\n        );\\n\\n        _earningSum[snapshotId] = _earningSum[snapshotId - 86400] + earningPerToken;\\n        _finalized = snapshotId;\\n\\n        uint256 supply;\\n        uint256 length = _totalSupplySnapshots.ids.length;\\n        if (length == 0 || _totalSupplySnapshots.ids[length - 1] < snapshotId) {\\n            supply = totalSupply();\\n        } else {\\n            uint256 index = length - 1;\\n            while(index > 0 && _totalSupplySnapshots.ids[index - 1] >= snapshotId) {\\n                index--;\\n            }\\n            supply = _totalSupplySnapshots.values[index];\\n        }\\n\\n        IERC20(_earningToken).safeTransferFrom(\\n            owner(),\\n            address(this),\\n            earningPerToken * supply\\n        );\\n    }\\n\\n    function withdraw() external whenNotPaused {\\n        uint256 snapshotId = _finalized;\\n\\n        Withdrawal storage withdrawal = _withdrawal[msg.sender];\\n        uint256 prev = withdrawal.snapshotId;\\n        require(snapshotId > prev, 'Mining3: already withdrawed');\\n\\n        Snapshots storage snapshots = _accountBalanceSnapshots[msg.sender];\\n        uint256 length = snapshots.ids.length;\\n\\n        uint256 totalEarning;\\n        uint256 index = withdrawal.index;\\n        for (; index < length; index++) {\\n            uint256 cur = snapshots.ids[index];\\n            if (cur > snapshotId) {\\n                break;\\n            }\\n            totalEarning += _earning(snapshots.values[index], prev, cur);\\n            prev = cur;\\n        }\\n        if (index == length && snapshotId > prev) {\\n            totalEarning += _earning(balanceOf(msg.sender), prev, snapshotId);\\n        }\\n\\n        withdrawal.snapshotId = snapshotId;\\n        withdrawal.index = index;\\n        IERC20(_earningToken).safeTransfer(msg.sender, totalEarning);\\n    }\\n\\n    function balanceOfAt(\\n        address account,\\n        uint256 snapshotId\\n    ) external view returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(\\n            snapshotId,\\n            _accountBalanceSnapshots[account]\\n        );\\n        return snapshotted ? value : balanceOf(account);\\n    }\\n\\n    function totalSupplyAt(uint256 snapshotId) external view returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(\\n            snapshotId,\\n            _totalSupplySnapshots\\n        );\\n        return snapshotted ? value : totalSupply();\\n    }\\n\\n    function balanceSnapshots(\\n        address account\\n    ) external view returns(Snapshots memory snapshots) {\\n        return _accountBalanceSnapshots[account];\\n    }\\n\\n    function lastFinalizedAt() external view returns(uint256) {\\n        return _finalized;\\n    }\\n\\n    function lastWithdrawAt(address account) external view returns(uint256) {\\n        return _withdrawal[account].snapshotId;\\n    }\\n\\n    function earningToken() external view returns(address) {\\n        return _earningToken;\\n    }\\n\\n    function batchEarningSum(\\n        uint256[] calldata snapshotIds\\n    ) external view returns(uint256[] memory) {\\n        uint256[] memory result = new uint256[](snapshotIds.length);\\n        for(uint256 i = 0; i < snapshotIds.length; i++) {\\n            result[i] = _earningSum[snapshotIds[i]];\\n        }\\n        return result;\\n    }\\n\\n    function _earning(uint256 balance, uint256 from, uint256 to) private view returns(uint256) {\\n        return balance == 0 ? 0 : balance * (\\n            _earningSum[to] - _earningSum[from]\\n        );\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        super._beforeTokenTransfer(from, to, amount);\\n        if (from == address(0)) {\\n            // mint\\n            _updateAccountSnapshot(to);\\n            _updateTotalSupplySnapshot();\\n        } else if (to == address(0)) {\\n            // burn\\n            _updateAccountSnapshot(from);\\n            _updateTotalSupplySnapshot();\\n        } else {\\n            // transfer\\n            _updateAccountSnapshot(from);\\n            _updateAccountSnapshot(to);\\n        }\\n    }\\n\\n    function _getCurrentSnapshotId() internal view returns (uint256) {\\n        return block.timestamp - block.timestamp % 86400;\\n    }\\n\\n    function _valueAt(\\n        uint256 snapshotId,\\n        Snapshots storage snapshots\\n    ) private view returns (bool, uint256) {\\n        require(snapshotId > 0, \\\"ERC20Snapshot: id is 0\\\");\\n        require(snapshotId <= _getCurrentSnapshotId(), \\\"ERC20Snapshot: nonexistent id\\\");\\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\\n        if (index == snapshots.ids.length) {\\n            return (false, 0);\\n        } else {\\n            return (true, snapshots.values[index]);\\n        }\\n    }\\n\\n    function _updateAccountSnapshot(address account) private {\\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\\n    }\\n\\n    function _updateTotalSupplySnapshot() private {\\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\\n    }\\n\\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\\n        uint256 currentId = _getCurrentSnapshotId();\\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\\n            snapshots.ids.push(currentId);\\n            snapshots.values.push(currentValue);\\n        }\\n    }\\n\\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\\n        return ids.length == 0 ? 0 : ids[ids.length - 1];\\n    }\\n}\\n\",\"keccak256\":\"0x832608dbe22d870bbb27524d44492423e026b9964870a89f0b307391cc64b277\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614478806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806366acfb6311610104578063981b24d0116100a2578063e263f59d11610071578063e263f59d14610532578063f2fde38b14610550578063f542033f1461056c578063fb66cbc514610588576101cf565b8063981b24d014610472578063a457c2d7146104a2578063a9059cbb146104d2578063dd62ed3e14610502576101cf565b80637fe205c7116100de5780637fe205c71461040e5780638456cb591461042c5780638da5cb5b1461043657806395d89b4114610454576101cf565b806366acfb63146103a457806370a08231146103d4578063715018a614610404576101cf565b80633ccfd60b1161017157806342966c681161014b57806342966c681461030a5780634ee2cd7e146103265780635c975abb14610356578063649bf86814610374576101cf565b80633ccfd60b146102da5780633f4ba83a146102e457806340c10f19146102ee576101cf565b806318160ddd116101ad57806318160ddd1461023e57806323b872dd1461025c578063313ce5671461028c57806339509351146102aa576101cf565b806305261aea146101d457806306fdde03146101f0578063095ea7b31461020e575b600080fd5b6101ee60048036038101906101e991906130ca565b6105b8565b005b6101f86108a7565b60405161020591906136b4565b60405180910390f35b61022860048036038101906102239190612f8d565b610939565b6040516102359190613699565b60405180910390f35b61024661095c565b60405161025391906139d8565b60405180910390f35b61027660048036038101906102719190612f3e565b610966565b6040516102839190613699565b60405180910390f35b610294610995565b6040516102a191906139f3565b60405180910390f35b6102c460048036038101906102bf9190612f8d565b61099e565b6040516102d19190613699565b60405180910390f35b6102e2610a48565b005b6102ec610cf1565b005b61030860048036038101906103039190612f8d565b610d77565b005b610324600480360381019061031f91906130ca565b610e01565b005b610340600480360381019061033b9190612f8d565b610e8a565b60405161034d91906139d8565b60405180910390f35b61035e610efa565b60405161036b9190613699565b60405180910390f35b61038e60048036038101906103899190612ed9565b610f11565b60405161039b91906139d8565b60405180910390f35b6103be60048036038101906103b99190612ed9565b610f5d565b6040516103cb91906139b6565b60405180910390f35b6103ee60048036038101906103e99190612ed9565b611066565b6040516103fb91906139d8565b60405180910390f35b61040c6110af565b005b610416611137565b60405161042391906135fc565b60405180910390f35b610434611161565b005b61043e6111e7565b60405161044b91906135fc565b60405180910390f35b61045c611211565b60405161046991906136b4565b60405180910390f35b61048c600480360381019061048791906130ca565b6112a3565b60405161049991906139d8565b60405180910390f35b6104bc60048036038101906104b79190612f8d565b6112d4565b6040516104c99190613699565b60405180910390f35b6104ec60048036038101906104e79190612f8d565b6113be565b6040516104f99190613699565b60405180910390f35b61051c60048036038101906105179190612f02565b6113e1565b60405161052991906139d8565b60405180910390f35b61053a611468565b60405161054791906139d8565b60405180910390f35b61056a60048036038101906105659190612ed9565b611472565b005b61058660048036038101906105819190613037565b61156a565b005b6105a2600480360381019061059d9190612fc9565b6116b4565b6040516105af9190613677565b60405180910390f35b6105c06117f0565b73ffffffffffffffffffffffffffffffffffffffff166105de6111e7565b73ffffffffffffffffffffffffffffffffffffffff1614610634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b90613856565b60405180910390fd5b60006201518060ca546106479190613ae0565b905060006106536117f8565b905080821115610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068f90613756565b60405180910390fd5b8260cc600062015180856106ac9190613bc1565b8152602001908152602001600020546106c59190613ae0565b60cc6000848152602001908152602001600020819055508160ca8190555060008060ce600001805490509050600081148061075257508360ce60000160018361070e9190613bc1565b81548110610745577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154105b156107665761075f61095c565b915061083f565b60006001826107759190613bc1565b90505b6000811180156107db57508460ce6000016001836107969190613bc1565b815481106107cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015410155b156107f35780806107eb90613c8c565b915050610778565b60ce6001018181548110610830577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549250505b6108a061084a6111e7565b3084886108579190613b67565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611819909392919063ffffffff16565b5050505050565b6060603680546108b690613cb6565b80601f01602080910402602001604051908101604052809291908181526020018280546108e290613cb6565b801561092f5780601f106109045761010080835404028352916020019161092f565b820191906000526020600020905b81548152906001019060200180831161091257829003601f168201915b5050505050905090565b6000806109446117f0565b90506109518185856118a2565b600191505092915050565b6000603554905090565b6000806109716117f0565b905061097e858285611a6d565b610989858585611af9565b60019150509392505050565b60006012905090565b6000806109a96117f0565b9050610a3d818585603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a389190613ae0565b6118a2565b600191505092915050565b610a50610efa565b15610a90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8790613816565b60405180910390fd5b600060ca549050600060cb60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001549050808311610b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1c906138b6565b60405180910390fd5b600060cd60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001805490509050600080856001015490505b82811015610c55576000846000018281548110610bc5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905087811115610be05750610c55565b610c31856001018381548110610c1f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001548783611d7d565b83610c3c9190613ae0565b9250809550508080610c4d90613d19565b915050610b7f565b8281148015610c6357508487115b15610c8957610c7b610c7433611066565b8689611d7d565b82610c869190613ae0565b91505b868660000181905550808660010181905550610ce8338360c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611dd49092919063ffffffff16565b50505050505050565b610cf96117f0565b73ffffffffffffffffffffffffffffffffffffffff16610d176111e7565b73ffffffffffffffffffffffffffffffffffffffff1614610d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6490613856565b60405180910390fd5b610d75611e5a565b565b610d7f6117f0565b73ffffffffffffffffffffffffffffffffffffffff16610d9d6111e7565b73ffffffffffffffffffffffffffffffffffffffff1614610df3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dea90613856565b60405180910390fd5b610dfd8282611efc565b5050565b610e096117f0565b73ffffffffffffffffffffffffffffffffffffffff16610e276111e7565b73ffffffffffffffffffffffffffffffffffffffff1614610e7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7490613856565b60405180910390fd5b610e87338261205d565b50565b6000806000610ed78460cd60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612236565b9150915081610eee57610ee985611066565b610ef0565b805b9250505092915050565b6000609760009054906101000a900460ff16905090565b600060cb60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b610f65612d2b565b60cd60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201805480602002602001604051908101604052809291908181526020018280548015610ffe57602002820191906000526020600020905b815481526020019060010190808311610fea575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561105657602002820191906000526020600020905b815481526020019060010190808311611042575b5050505050815250509050919050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6110b76117f0565b73ffffffffffffffffffffffffffffffffffffffff166110d56111e7565b73ffffffffffffffffffffffffffffffffffffffff161461112b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112290613856565b60405180910390fd5b6111356000612352565b565b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6111696117f0565b73ffffffffffffffffffffffffffffffffffffffff166111876111e7565b73ffffffffffffffffffffffffffffffffffffffff16146111dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d490613856565b60405180910390fd5b6111e5612418565b565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606037805461122090613cb6565b80601f016020809104026020016040519081016040528092919081815260200182805461124c90613cb6565b80156112995780601f1061126e57610100808354040283529160200191611299565b820191906000526020600020905b81548152906001019060200180831161127c57829003601f168201915b5050505050905090565b60008060006112b38460ce612236565b91509150816112c9576112c461095c565b6112cb565b805b92505050919050565b6000806112df6117f0565b90506000603460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156113a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139c90613976565b60405180910390fd5b6113b282868684036118a2565b60019250505092915050565b6000806113c96117f0565b90506113d6818585611af9565b600191505092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600060ca54905090565b61147a6117f0565b73ffffffffffffffffffffffffffffffffffffffff166114986111e7565b73ffffffffffffffffffffffffffffffffffffffff16146114ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e590613856565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561155e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155590613776565b60405180910390fd5b61156781612352565b50565b600060019054906101000a900460ff166115925760008054906101000a900460ff161561159b565b61159a6124bb565b5b6115da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d190613836565b60405180910390fd5b60008060019054906101000a900460ff16159050801561162a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6116326124cc565b61163a612525565b611644858561257e565b8260c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160ca8190555080156116ad5760008060016101000a81548160ff0219169083151502179055505b5050505050565b606060008383905067ffffffffffffffff8111156116fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156117295781602001602082028036833780820191505090505b50905060005b848490508110156117e55760cc6000868684818110611777577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358152602001908152602001600020548282815181106117c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806117dd90613d19565b91505061172f565b508091505092915050565b600033905090565b600062015180426118099190613d62565b426118149190613bc1565b905090565b61189c846323b872dd60e01b85858560405160240161183a93929190613617565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506125db565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611912576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611909906138d6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611982576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197990613796565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611a6091906139d8565b60405180910390a3505050565b6000611a7984846113e1565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611af35781811015611ae5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611adc906137b6565b60405180910390fd5b611af284848484036118a2565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611b69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6090613896565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd0906136f6565b60405180910390fd5b611be48383836126a2565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611c6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c62906137d6565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d009190613ae0565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611d6491906139d8565b60405180910390a3611d7784848461275c565b50505050565b6000808414611dc85760cc60008481526020019081526020016000205460cc600084815260200190815260200160002054611db89190613bc1565b84611dc39190613b67565b611dcb565b60005b90509392505050565b611e558363a9059cbb60e01b8484604051602401611df392919061364e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506125db565b505050565b611e62610efa565b611ea1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9890613716565b60405180910390fd5b6000609760006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611ee56117f0565b604051611ef291906135fc565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6390613996565b60405180910390fd5b611f78600083836126a2565b8060356000828254611f8a9190613ae0565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fe09190613ae0565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161204591906139d8565b60405180910390a36120596000838361275c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156120cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c490613876565b60405180910390fd5b6120d9826000836126a2565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215790613736565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603560008282546121b89190613bc1565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161221d91906139d8565b60405180910390a36122318360008461275c565b505050565b6000806000841161227c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227390613936565b60405180910390fd5b6122846117f8565b8411156122c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122bd906136d6565b60405180910390fd5b60006122de858560000161276190919063ffffffff16565b905083600001805490508114156122fc57600080925092505061234b565b600184600101828154811061233a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015492509250505b9250929050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612420610efa565b15612460576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161245790613816565b60405180910390fd5b6001609760006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586124a46117f0565b6040516124b191906135fc565b60405180910390a1565b60006124c630612887565b15905090565b600060019054906101000a900460ff1661251b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251290613916565b60405180910390fd5b6125236128aa565b565b600060019054906101000a900460ff16612574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256b90613916565b60405180910390fd5b61257c61290b565b565b600060019054906101000a900460ff166125cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c490613916565b60405180910390fd5b6125d78282612977565b5050565b600061263d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166129f89092919063ffffffff16565b905060008151111561269d578080602001905181019061265d919061300e565b61269c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269390613956565b60405180910390fd5b5b505050565b6126ad838383612a10565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156126f8576126eb82612a15565b6126f3612a68565b612757565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156127435761273683612a15565b61273e612a68565b612756565b61274c83612a15565b61275582612a15565b5b5b505050565b505050565b600080838054905014156127785760009050612881565b600080848054905090505b808210156128025760006127978383612a7c565b9050848682815481106127d3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015411156127ec578091506127fc565b6001816127f99190613ae0565b92505b50612783565b6000821180156128605750838560018461281c9190613bc1565b81548110612853577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154145b1561287b576001826128729190613bc1565b92505050612881565b81925050505b92915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166128f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128f090613916565b60405180910390fd5b6129096129046117f0565b612352565b565b600060019054906101000a900460ff1661295a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295190613916565b60405180910390fd5b6000609760006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff166129c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129bd90613916565b60405180910390fd5b81603690805190602001906129dc929190612d45565b5080603790805190602001906129f3929190612d45565b505050565b6060612a078484600085612aa2565b90509392505050565b505050565b612a6560cd60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612a6083611066565b612bb6565b50565b612a7a60ce612a7561095c565b612bb6565b565b60006002828418612a8d9190613b36565b828416612a9a9190613ae0565b905092915050565b606082471015612ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ade906137f6565b60405180910390fd5b612af085612c31565b612b2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b26906138f6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612b5891906135e5565b60006040518083038185875af1925050503d8060008114612b95576040519150601f19603f3d011682016040523d82523d6000602084013e612b9a565b606091505b5091509150612baa828286612c54565b92505050949350505050565b6000612bc06117f8565b905080612bcf84600001612cbb565b1015612c2c5782600001819080600181540180825580915050600190039060005260206000200160009091909190915055826001018290806001815401808255809150506001900390600052602060002001600090919091909150555b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315612c6457829050612cb4565b600083511115612c775782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cab91906136b4565b60405180910390fd5b9392505050565b600080828054905014612d21578160018380549050612cda9190613bc1565b81548110612d11577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154612d24565b60005b9050919050565b604051806040016040528060608152602001606081525090565b828054612d5190613cb6565b90600052602060002090601f016020900481019282612d735760008555612dba565b82601f10612d8c57805160ff1916838001178555612dba565b82800160010185558215612dba579182015b82811115612db9578251825591602001919060010190612d9e565b5b509050612dc79190612dcb565b5090565b5b80821115612de4576000816000905550600101612dcc565b5090565b6000612dfb612df684613a33565b613a0e565b905082815260208101848484011115612e1357600080fd5b612e1e848285613c4a565b509392505050565b600081359050612e35816143fd565b92915050565b60008083601f840112612e4d57600080fd5b8235905067ffffffffffffffff811115612e6657600080fd5b602083019150836020820283011115612e7e57600080fd5b9250929050565b600081519050612e9481614414565b92915050565b600082601f830112612eab57600080fd5b8135612ebb848260208601612de8565b91505092915050565b600081359050612ed38161442b565b92915050565b600060208284031215612eeb57600080fd5b6000612ef984828501612e26565b91505092915050565b60008060408385031215612f1557600080fd5b6000612f2385828601612e26565b9250506020612f3485828601612e26565b9150509250929050565b600080600060608486031215612f5357600080fd5b6000612f6186828701612e26565b9350506020612f7286828701612e26565b9250506040612f8386828701612ec4565b9150509250925092565b60008060408385031215612fa057600080fd5b6000612fae85828601612e26565b9250506020612fbf85828601612ec4565b9150509250929050565b60008060208385031215612fdc57600080fd5b600083013567ffffffffffffffff811115612ff657600080fd5b61300285828601612e3b565b92509250509250929050565b60006020828403121561302057600080fd5b600061302e84828501612e85565b91505092915050565b6000806000806080858703121561304d57600080fd5b600085013567ffffffffffffffff81111561306757600080fd5b61307387828801612e9a565b945050602085013567ffffffffffffffff81111561309057600080fd5b61309c87828801612e9a565b93505060406130ad87828801612e26565b92505060606130be87828801612ec4565b91505092959194509250565b6000602082840312156130dc57600080fd5b60006130ea84828501612ec4565b91505092915050565b60006130ff83836135b8565b60208301905092915050565b61311481613bf5565b82525050565b600061312582613a74565b61312f8185613aa2565b935061313a83613a64565b8060005b8381101561316b57815161315288826130f3565b975061315d83613a95565b92505060018101905061313e565b5085935050505092915050565b600061318382613a74565b61318d8185613ab3565b935061319883613a64565b8060005b838110156131c95781516131b088826130f3565b97506131bb83613a95565b92505060018101905061319c565b5085935050505092915050565b6131df81613c07565b82525050565b60006131f082613a7f565b6131fa8185613ac4565b935061320a818560208601613c59565b80840191505092915050565b600061322182613a8a565b61322b8185613acf565b935061323b818560208601613c59565b61324481613e4f565b840191505092915050565b600061325c601d83613acf565b915061326782613e60565b602082019050919050565b600061327f602383613acf565b915061328a82613e89565b604082019050919050565b60006132a2601483613acf565b91506132ad82613ed8565b602082019050919050565b60006132c5602283613acf565b91506132d082613f01565b604082019050919050565b60006132e8602083613acf565b91506132f382613f50565b602082019050919050565b600061330b602683613acf565b915061331682613f79565b604082019050919050565b600061332e602283613acf565b915061333982613fc8565b604082019050919050565b6000613351601d83613acf565b915061335c82614017565b602082019050919050565b6000613374602683613acf565b915061337f82614040565b604082019050919050565b6000613397602683613acf565b91506133a28261408f565b604082019050919050565b60006133ba601083613acf565b91506133c5826140de565b602082019050919050565b60006133dd602e83613acf565b91506133e882614107565b604082019050919050565b6000613400602083613acf565b915061340b82614156565b602082019050919050565b6000613423602183613acf565b915061342e8261417f565b604082019050919050565b6000613446602583613acf565b9150613451826141ce565b604082019050919050565b6000613469601b83613acf565b91506134748261421d565b602082019050919050565b600061348c602483613acf565b915061349782614246565b604082019050919050565b60006134af601d83613acf565b91506134ba82614295565b602082019050919050565b60006134d2602b83613acf565b91506134dd826142be565b604082019050919050565b60006134f5601683613acf565b91506135008261430d565b602082019050919050565b6000613518602a83613acf565b915061352382614336565b604082019050919050565b600061353b602583613acf565b915061354682614385565b604082019050919050565b600061355e601f83613acf565b9150613569826143d4565b602082019050919050565b60006040830160008301518482036000860152613591828261311a565b915050602083015184820360208601526135ab828261311a565b9150508091505092915050565b6135c181613c33565b82525050565b6135d081613c33565b82525050565b6135df81613c3d565b82525050565b60006135f182846131e5565b915081905092915050565b6000602082019050613611600083018461310b565b92915050565b600060608201905061362c600083018661310b565b613639602083018561310b565b61364660408301846135c7565b949350505050565b6000604082019050613663600083018561310b565b61367060208301846135c7565b9392505050565b600060208201905081810360008301526136918184613178565b905092915050565b60006020820190506136ae60008301846131d6565b92915050565b600060208201905081810360008301526136ce8184613216565b905092915050565b600060208201905081810360008301526136ef8161324f565b9050919050565b6000602082019050818103600083015261370f81613272565b9050919050565b6000602082019050818103600083015261372f81613295565b9050919050565b6000602082019050818103600083015261374f816132b8565b9050919050565b6000602082019050818103600083015261376f816132db565b9050919050565b6000602082019050818103600083015261378f816132fe565b9050919050565b600060208201905081810360008301526137af81613321565b9050919050565b600060208201905081810360008301526137cf81613344565b9050919050565b600060208201905081810360008301526137ef81613367565b9050919050565b6000602082019050818103600083015261380f8161338a565b9050919050565b6000602082019050818103600083015261382f816133ad565b9050919050565b6000602082019050818103600083015261384f816133d0565b9050919050565b6000602082019050818103600083015261386f816133f3565b9050919050565b6000602082019050818103600083015261388f81613416565b9050919050565b600060208201905081810360008301526138af81613439565b9050919050565b600060208201905081810360008301526138cf8161345c565b9050919050565b600060208201905081810360008301526138ef8161347f565b9050919050565b6000602082019050818103600083015261390f816134a2565b9050919050565b6000602082019050818103600083015261392f816134c5565b9050919050565b6000602082019050818103600083015261394f816134e8565b9050919050565b6000602082019050818103600083015261396f8161350b565b9050919050565b6000602082019050818103600083015261398f8161352e565b9050919050565b600060208201905081810360008301526139af81613551565b9050919050565b600060208201905081810360008301526139d08184613574565b905092915050565b60006020820190506139ed60008301846135c7565b92915050565b6000602082019050613a0860008301846135d6565b92915050565b6000613a18613a29565b9050613a248282613ce8565b919050565b6000604051905090565b600067ffffffffffffffff821115613a4e57613a4d613e20565b5b613a5782613e4f565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000613aeb82613c33565b9150613af683613c33565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613b2b57613b2a613d93565b5b828201905092915050565b6000613b4182613c33565b9150613b4c83613c33565b925082613b5c57613b5b613dc2565b5b828204905092915050565b6000613b7282613c33565b9150613b7d83613c33565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613bb657613bb5613d93565b5b828202905092915050565b6000613bcc82613c33565b9150613bd783613c33565b925082821015613bea57613be9613d93565b5b828203905092915050565b6000613c0082613c13565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613c77578082015181840152602081019050613c5c565b83811115613c86576000848401525b50505050565b6000613c9782613c33565b91506000821415613cab57613caa613d93565b5b600182039050919050565b60006002820490506001821680613cce57607f821691505b60208210811415613ce257613ce1613df1565b5b50919050565b613cf182613e4f565b810181811067ffffffffffffffff82111715613d1057613d0f613e20565b5b80604052505050565b6000613d2482613c33565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613d5757613d56613d93565b5b600182019050919050565b6000613d6d82613c33565b9150613d7883613c33565b925082613d8857613d87613dc2565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433230536e617073686f743a206e6f6e6578697374656e74206964000000600082015250565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f4d696e696e67333a20616c6c20736e617073686f74732066696e616c697a6564600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f4d696e696e67333a20616c726561647920776974686472617765640000000000600082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f4552433230536e617073686f743a206964206973203000000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61440681613bf5565b811461441157600080fd5b50565b61441d81613c07565b811461442857600080fd5b50565b61443481613c33565b811461443f57600080fd5b5056fea26469706673582212205f4dbfac3bf0937a722979ae993e45afcc613c6df3ce77d53923cdea1e974f2064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806366acfb6311610104578063981b24d0116100a2578063e263f59d11610071578063e263f59d14610532578063f2fde38b14610550578063f542033f1461056c578063fb66cbc514610588576101cf565b8063981b24d014610472578063a457c2d7146104a2578063a9059cbb146104d2578063dd62ed3e14610502576101cf565b80637fe205c7116100de5780637fe205c71461040e5780638456cb591461042c5780638da5cb5b1461043657806395d89b4114610454576101cf565b806366acfb63146103a457806370a08231146103d4578063715018a614610404576101cf565b80633ccfd60b1161017157806342966c681161014b57806342966c681461030a5780634ee2cd7e146103265780635c975abb14610356578063649bf86814610374576101cf565b80633ccfd60b146102da5780633f4ba83a146102e457806340c10f19146102ee576101cf565b806318160ddd116101ad57806318160ddd1461023e57806323b872dd1461025c578063313ce5671461028c57806339509351146102aa576101cf565b806305261aea146101d457806306fdde03146101f0578063095ea7b31461020e575b600080fd5b6101ee60048036038101906101e991906130ca565b6105b8565b005b6101f86108a7565b60405161020591906136b4565b60405180910390f35b61022860048036038101906102239190612f8d565b610939565b6040516102359190613699565b60405180910390f35b61024661095c565b60405161025391906139d8565b60405180910390f35b61027660048036038101906102719190612f3e565b610966565b6040516102839190613699565b60405180910390f35b610294610995565b6040516102a191906139f3565b60405180910390f35b6102c460048036038101906102bf9190612f8d565b61099e565b6040516102d19190613699565b60405180910390f35b6102e2610a48565b005b6102ec610cf1565b005b61030860048036038101906103039190612f8d565b610d77565b005b610324600480360381019061031f91906130ca565b610e01565b005b610340600480360381019061033b9190612f8d565b610e8a565b60405161034d91906139d8565b60405180910390f35b61035e610efa565b60405161036b9190613699565b60405180910390f35b61038e60048036038101906103899190612ed9565b610f11565b60405161039b91906139d8565b60405180910390f35b6103be60048036038101906103b99190612ed9565b610f5d565b6040516103cb91906139b6565b60405180910390f35b6103ee60048036038101906103e99190612ed9565b611066565b6040516103fb91906139d8565b60405180910390f35b61040c6110af565b005b610416611137565b60405161042391906135fc565b60405180910390f35b610434611161565b005b61043e6111e7565b60405161044b91906135fc565b60405180910390f35b61045c611211565b60405161046991906136b4565b60405180910390f35b61048c600480360381019061048791906130ca565b6112a3565b60405161049991906139d8565b60405180910390f35b6104bc60048036038101906104b79190612f8d565b6112d4565b6040516104c99190613699565b60405180910390f35b6104ec60048036038101906104e79190612f8d565b6113be565b6040516104f99190613699565b60405180910390f35b61051c60048036038101906105179190612f02565b6113e1565b60405161052991906139d8565b60405180910390f35b61053a611468565b60405161054791906139d8565b60405180910390f35b61056a60048036038101906105659190612ed9565b611472565b005b61058660048036038101906105819190613037565b61156a565b005b6105a2600480360381019061059d9190612fc9565b6116b4565b6040516105af9190613677565b60405180910390f35b6105c06117f0565b73ffffffffffffffffffffffffffffffffffffffff166105de6111e7565b73ffffffffffffffffffffffffffffffffffffffff1614610634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b90613856565b60405180910390fd5b60006201518060ca546106479190613ae0565b905060006106536117f8565b905080821115610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068f90613756565b60405180910390fd5b8260cc600062015180856106ac9190613bc1565b8152602001908152602001600020546106c59190613ae0565b60cc6000848152602001908152602001600020819055508160ca8190555060008060ce600001805490509050600081148061075257508360ce60000160018361070e9190613bc1565b81548110610745577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154105b156107665761075f61095c565b915061083f565b60006001826107759190613bc1565b90505b6000811180156107db57508460ce6000016001836107969190613bc1565b815481106107cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015410155b156107f35780806107eb90613c8c565b915050610778565b60ce6001018181548110610830577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549250505b6108a061084a6111e7565b3084886108579190613b67565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611819909392919063ffffffff16565b5050505050565b6060603680546108b690613cb6565b80601f01602080910402602001604051908101604052809291908181526020018280546108e290613cb6565b801561092f5780601f106109045761010080835404028352916020019161092f565b820191906000526020600020905b81548152906001019060200180831161091257829003601f168201915b5050505050905090565b6000806109446117f0565b90506109518185856118a2565b600191505092915050565b6000603554905090565b6000806109716117f0565b905061097e858285611a6d565b610989858585611af9565b60019150509392505050565b60006012905090565b6000806109a96117f0565b9050610a3d818585603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a389190613ae0565b6118a2565b600191505092915050565b610a50610efa565b15610a90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8790613816565b60405180910390fd5b600060ca549050600060cb60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001549050808311610b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1c906138b6565b60405180910390fd5b600060cd60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001805490509050600080856001015490505b82811015610c55576000846000018281548110610bc5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905087811115610be05750610c55565b610c31856001018381548110610c1f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001548783611d7d565b83610c3c9190613ae0565b9250809550508080610c4d90613d19565b915050610b7f565b8281148015610c6357508487115b15610c8957610c7b610c7433611066565b8689611d7d565b82610c869190613ae0565b91505b868660000181905550808660010181905550610ce8338360c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611dd49092919063ffffffff16565b50505050505050565b610cf96117f0565b73ffffffffffffffffffffffffffffffffffffffff16610d176111e7565b73ffffffffffffffffffffffffffffffffffffffff1614610d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6490613856565b60405180910390fd5b610d75611e5a565b565b610d7f6117f0565b73ffffffffffffffffffffffffffffffffffffffff16610d9d6111e7565b73ffffffffffffffffffffffffffffffffffffffff1614610df3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dea90613856565b60405180910390fd5b610dfd8282611efc565b5050565b610e096117f0565b73ffffffffffffffffffffffffffffffffffffffff16610e276111e7565b73ffffffffffffffffffffffffffffffffffffffff1614610e7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7490613856565b60405180910390fd5b610e87338261205d565b50565b6000806000610ed78460cd60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612236565b9150915081610eee57610ee985611066565b610ef0565b805b9250505092915050565b6000609760009054906101000a900460ff16905090565b600060cb60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b610f65612d2b565b60cd60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201805480602002602001604051908101604052809291908181526020018280548015610ffe57602002820191906000526020600020905b815481526020019060010190808311610fea575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561105657602002820191906000526020600020905b815481526020019060010190808311611042575b5050505050815250509050919050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6110b76117f0565b73ffffffffffffffffffffffffffffffffffffffff166110d56111e7565b73ffffffffffffffffffffffffffffffffffffffff161461112b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112290613856565b60405180910390fd5b6111356000612352565b565b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6111696117f0565b73ffffffffffffffffffffffffffffffffffffffff166111876111e7565b73ffffffffffffffffffffffffffffffffffffffff16146111dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d490613856565b60405180910390fd5b6111e5612418565b565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606037805461122090613cb6565b80601f016020809104026020016040519081016040528092919081815260200182805461124c90613cb6565b80156112995780601f1061126e57610100808354040283529160200191611299565b820191906000526020600020905b81548152906001019060200180831161127c57829003601f168201915b5050505050905090565b60008060006112b38460ce612236565b91509150816112c9576112c461095c565b6112cb565b805b92505050919050565b6000806112df6117f0565b90506000603460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156113a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139c90613976565b60405180910390fd5b6113b282868684036118a2565b60019250505092915050565b6000806113c96117f0565b90506113d6818585611af9565b600191505092915050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600060ca54905090565b61147a6117f0565b73ffffffffffffffffffffffffffffffffffffffff166114986111e7565b73ffffffffffffffffffffffffffffffffffffffff16146114ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e590613856565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561155e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155590613776565b60405180910390fd5b61156781612352565b50565b600060019054906101000a900460ff166115925760008054906101000a900460ff161561159b565b61159a6124bb565b5b6115da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d190613836565b60405180910390fd5b60008060019054906101000a900460ff16159050801561162a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6116326124cc565b61163a612525565b611644858561257e565b8260c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160ca8190555080156116ad5760008060016101000a81548160ff0219169083151502179055505b5050505050565b606060008383905067ffffffffffffffff8111156116fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156117295781602001602082028036833780820191505090505b50905060005b848490508110156117e55760cc6000868684818110611777577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358152602001908152602001600020548282815181106117c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505080806117dd90613d19565b91505061172f565b508091505092915050565b600033905090565b600062015180426118099190613d62565b426118149190613bc1565b905090565b61189c846323b872dd60e01b85858560405160240161183a93929190613617565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506125db565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611912576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611909906138d6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611982576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197990613796565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611a6091906139d8565b60405180910390a3505050565b6000611a7984846113e1565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611af35781811015611ae5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611adc906137b6565b60405180910390fd5b611af284848484036118a2565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611b69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6090613896565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd0906136f6565b60405180910390fd5b611be48383836126a2565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611c6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c62906137d6565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d009190613ae0565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611d6491906139d8565b60405180910390a3611d7784848461275c565b50505050565b6000808414611dc85760cc60008481526020019081526020016000205460cc600084815260200190815260200160002054611db89190613bc1565b84611dc39190613b67565b611dcb565b60005b90509392505050565b611e558363a9059cbb60e01b8484604051602401611df392919061364e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506125db565b505050565b611e62610efa565b611ea1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9890613716565b60405180910390fd5b6000609760006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611ee56117f0565b604051611ef291906135fc565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6390613996565b60405180910390fd5b611f78600083836126a2565b8060356000828254611f8a9190613ae0565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fe09190613ae0565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161204591906139d8565b60405180910390a36120596000838361275c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156120cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c490613876565b60405180910390fd5b6120d9826000836126a2565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215790613736565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603560008282546121b89190613bc1565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161221d91906139d8565b60405180910390a36122318360008461275c565b505050565b6000806000841161227c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227390613936565b60405180910390fd5b6122846117f8565b8411156122c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122bd906136d6565b60405180910390fd5b60006122de858560000161276190919063ffffffff16565b905083600001805490508114156122fc57600080925092505061234b565b600184600101828154811061233a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015492509250505b9250929050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612420610efa565b15612460576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161245790613816565b60405180910390fd5b6001609760006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586124a46117f0565b6040516124b191906135fc565b60405180910390a1565b60006124c630612887565b15905090565b600060019054906101000a900460ff1661251b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251290613916565b60405180910390fd5b6125236128aa565b565b600060019054906101000a900460ff16612574576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256b90613916565b60405180910390fd5b61257c61290b565b565b600060019054906101000a900460ff166125cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c490613916565b60405180910390fd5b6125d78282612977565b5050565b600061263d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166129f89092919063ffffffff16565b905060008151111561269d578080602001905181019061265d919061300e565b61269c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269390613956565b60405180910390fd5b5b505050565b6126ad838383612a10565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156126f8576126eb82612a15565b6126f3612a68565b612757565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156127435761273683612a15565b61273e612a68565b612756565b61274c83612a15565b61275582612a15565b5b5b505050565b505050565b600080838054905014156127785760009050612881565b600080848054905090505b808210156128025760006127978383612a7c565b9050848682815481106127d3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015411156127ec578091506127fc565b6001816127f99190613ae0565b92505b50612783565b6000821180156128605750838560018461281c9190613bc1565b81548110612853577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154145b1561287b576001826128729190613bc1565b92505050612881565b81925050505b92915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166128f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128f090613916565b60405180910390fd5b6129096129046117f0565b612352565b565b600060019054906101000a900460ff1661295a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295190613916565b60405180910390fd5b6000609760006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff166129c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129bd90613916565b60405180910390fd5b81603690805190602001906129dc929190612d45565b5080603790805190602001906129f3929190612d45565b505050565b6060612a078484600085612aa2565b90509392505050565b505050565b612a6560cd60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612a6083611066565b612bb6565b50565b612a7a60ce612a7561095c565b612bb6565b565b60006002828418612a8d9190613b36565b828416612a9a9190613ae0565b905092915050565b606082471015612ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ade906137f6565b60405180910390fd5b612af085612c31565b612b2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b26906138f6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612b5891906135e5565b60006040518083038185875af1925050503d8060008114612b95576040519150601f19603f3d011682016040523d82523d6000602084013e612b9a565b606091505b5091509150612baa828286612c54565b92505050949350505050565b6000612bc06117f8565b905080612bcf84600001612cbb565b1015612c2c5782600001819080600181540180825580915050600190039060005260206000200160009091909190915055826001018290806001815401808255809150506001900390600052602060002001600090919091909150555b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315612c6457829050612cb4565b600083511115612c775782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cab91906136b4565b60405180910390fd5b9392505050565b600080828054905014612d21578160018380549050612cda9190613bc1565b81548110612d11577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154612d24565b60005b9050919050565b604051806040016040528060608152602001606081525090565b828054612d5190613cb6565b90600052602060002090601f016020900481019282612d735760008555612dba565b82601f10612d8c57805160ff1916838001178555612dba565b82800160010185558215612dba579182015b82811115612db9578251825591602001919060010190612d9e565b5b509050612dc79190612dcb565b5090565b5b80821115612de4576000816000905550600101612dcc565b5090565b6000612dfb612df684613a33565b613a0e565b905082815260208101848484011115612e1357600080fd5b612e1e848285613c4a565b509392505050565b600081359050612e35816143fd565b92915050565b60008083601f840112612e4d57600080fd5b8235905067ffffffffffffffff811115612e6657600080fd5b602083019150836020820283011115612e7e57600080fd5b9250929050565b600081519050612e9481614414565b92915050565b600082601f830112612eab57600080fd5b8135612ebb848260208601612de8565b91505092915050565b600081359050612ed38161442b565b92915050565b600060208284031215612eeb57600080fd5b6000612ef984828501612e26565b91505092915050565b60008060408385031215612f1557600080fd5b6000612f2385828601612e26565b9250506020612f3485828601612e26565b9150509250929050565b600080600060608486031215612f5357600080fd5b6000612f6186828701612e26565b9350506020612f7286828701612e26565b9250506040612f8386828701612ec4565b9150509250925092565b60008060408385031215612fa057600080fd5b6000612fae85828601612e26565b9250506020612fbf85828601612ec4565b9150509250929050565b60008060208385031215612fdc57600080fd5b600083013567ffffffffffffffff811115612ff657600080fd5b61300285828601612e3b565b92509250509250929050565b60006020828403121561302057600080fd5b600061302e84828501612e85565b91505092915050565b6000806000806080858703121561304d57600080fd5b600085013567ffffffffffffffff81111561306757600080fd5b61307387828801612e9a565b945050602085013567ffffffffffffffff81111561309057600080fd5b61309c87828801612e9a565b93505060406130ad87828801612e26565b92505060606130be87828801612ec4565b91505092959194509250565b6000602082840312156130dc57600080fd5b60006130ea84828501612ec4565b91505092915050565b60006130ff83836135b8565b60208301905092915050565b61311481613bf5565b82525050565b600061312582613a74565b61312f8185613aa2565b935061313a83613a64565b8060005b8381101561316b57815161315288826130f3565b975061315d83613a95565b92505060018101905061313e565b5085935050505092915050565b600061318382613a74565b61318d8185613ab3565b935061319883613a64565b8060005b838110156131c95781516131b088826130f3565b97506131bb83613a95565b92505060018101905061319c565b5085935050505092915050565b6131df81613c07565b82525050565b60006131f082613a7f565b6131fa8185613ac4565b935061320a818560208601613c59565b80840191505092915050565b600061322182613a8a565b61322b8185613acf565b935061323b818560208601613c59565b61324481613e4f565b840191505092915050565b600061325c601d83613acf565b915061326782613e60565b602082019050919050565b600061327f602383613acf565b915061328a82613e89565b604082019050919050565b60006132a2601483613acf565b91506132ad82613ed8565b602082019050919050565b60006132c5602283613acf565b91506132d082613f01565b604082019050919050565b60006132e8602083613acf565b91506132f382613f50565b602082019050919050565b600061330b602683613acf565b915061331682613f79565b604082019050919050565b600061332e602283613acf565b915061333982613fc8565b604082019050919050565b6000613351601d83613acf565b915061335c82614017565b602082019050919050565b6000613374602683613acf565b915061337f82614040565b604082019050919050565b6000613397602683613acf565b91506133a28261408f565b604082019050919050565b60006133ba601083613acf565b91506133c5826140de565b602082019050919050565b60006133dd602e83613acf565b91506133e882614107565b604082019050919050565b6000613400602083613acf565b915061340b82614156565b602082019050919050565b6000613423602183613acf565b915061342e8261417f565b604082019050919050565b6000613446602583613acf565b9150613451826141ce565b604082019050919050565b6000613469601b83613acf565b91506134748261421d565b602082019050919050565b600061348c602483613acf565b915061349782614246565b604082019050919050565b60006134af601d83613acf565b91506134ba82614295565b602082019050919050565b60006134d2602b83613acf565b91506134dd826142be565b604082019050919050565b60006134f5601683613acf565b91506135008261430d565b602082019050919050565b6000613518602a83613acf565b915061352382614336565b604082019050919050565b600061353b602583613acf565b915061354682614385565b604082019050919050565b600061355e601f83613acf565b9150613569826143d4565b602082019050919050565b60006040830160008301518482036000860152613591828261311a565b915050602083015184820360208601526135ab828261311a565b9150508091505092915050565b6135c181613c33565b82525050565b6135d081613c33565b82525050565b6135df81613c3d565b82525050565b60006135f182846131e5565b915081905092915050565b6000602082019050613611600083018461310b565b92915050565b600060608201905061362c600083018661310b565b613639602083018561310b565b61364660408301846135c7565b949350505050565b6000604082019050613663600083018561310b565b61367060208301846135c7565b9392505050565b600060208201905081810360008301526136918184613178565b905092915050565b60006020820190506136ae60008301846131d6565b92915050565b600060208201905081810360008301526136ce8184613216565b905092915050565b600060208201905081810360008301526136ef8161324f565b9050919050565b6000602082019050818103600083015261370f81613272565b9050919050565b6000602082019050818103600083015261372f81613295565b9050919050565b6000602082019050818103600083015261374f816132b8565b9050919050565b6000602082019050818103600083015261376f816132db565b9050919050565b6000602082019050818103600083015261378f816132fe565b9050919050565b600060208201905081810360008301526137af81613321565b9050919050565b600060208201905081810360008301526137cf81613344565b9050919050565b600060208201905081810360008301526137ef81613367565b9050919050565b6000602082019050818103600083015261380f8161338a565b9050919050565b6000602082019050818103600083015261382f816133ad565b9050919050565b6000602082019050818103600083015261384f816133d0565b9050919050565b6000602082019050818103600083015261386f816133f3565b9050919050565b6000602082019050818103600083015261388f81613416565b9050919050565b600060208201905081810360008301526138af81613439565b9050919050565b600060208201905081810360008301526138cf8161345c565b9050919050565b600060208201905081810360008301526138ef8161347f565b9050919050565b6000602082019050818103600083015261390f816134a2565b9050919050565b6000602082019050818103600083015261392f816134c5565b9050919050565b6000602082019050818103600083015261394f816134e8565b9050919050565b6000602082019050818103600083015261396f8161350b565b9050919050565b6000602082019050818103600083015261398f8161352e565b9050919050565b600060208201905081810360008301526139af81613551565b9050919050565b600060208201905081810360008301526139d08184613574565b905092915050565b60006020820190506139ed60008301846135c7565b92915050565b6000602082019050613a0860008301846135d6565b92915050565b6000613a18613a29565b9050613a248282613ce8565b919050565b6000604051905090565b600067ffffffffffffffff821115613a4e57613a4d613e20565b5b613a5782613e4f565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000613aeb82613c33565b9150613af683613c33565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613b2b57613b2a613d93565b5b828201905092915050565b6000613b4182613c33565b9150613b4c83613c33565b925082613b5c57613b5b613dc2565b5b828204905092915050565b6000613b7282613c33565b9150613b7d83613c33565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613bb657613bb5613d93565b5b828202905092915050565b6000613bcc82613c33565b9150613bd783613c33565b925082821015613bea57613be9613d93565b5b828203905092915050565b6000613c0082613c13565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613c77578082015181840152602081019050613c5c565b83811115613c86576000848401525b50505050565b6000613c9782613c33565b91506000821415613cab57613caa613d93565b5b600182039050919050565b60006002820490506001821680613cce57607f821691505b60208210811415613ce257613ce1613df1565b5b50919050565b613cf182613e4f565b810181811067ffffffffffffffff82111715613d1057613d0f613e20565b5b80604052505050565b6000613d2482613c33565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613d5757613d56613d93565b5b600182019050919050565b6000613d6d82613c33565b9150613d7883613c33565b925082613d8857613d87613dc2565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433230536e617073686f743a206e6f6e6578697374656e74206964000000600082015250565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f4d696e696e67333a20616c6c20736e617073686f74732066696e616c697a6564600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f4d696e696e67333a20616c726561647920776974686472617765640000000000600082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f4552433230536e617073686f743a206964206973203000000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61440681613bf5565b811461441157600080fd5b50565b61441d81613c07565b811461442857600080fd5b50565b61443481613c33565b811461443f57600080fd5b5056fea26469706673582212205f4dbfac3bf0937a722979ae993e45afcc613c6df3ce77d53923cdea1e974f2064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1308,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 327,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 333,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 335,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 337,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 339,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 920,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 218,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 307,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2115,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "_earningToken",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 2117,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "_finalized",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 2122,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "_withdrawal",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_struct(Withdrawal)2113_storage)"
      },
      {
        "astId": 2126,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "_earningSum",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2138,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "_accountBalanceSnapshots",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_struct(Snapshots)2133_storage)"
      },
      {
        "astId": 2141,
        "contract": "contracts/Mining3.sol:Mining3",
        "label": "_totalSupplySnapshots",
        "offset": 0,
        "slot": "206",
        "type": "t_struct(Snapshots)2133_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Snapshots)2133_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Mining3.Snapshots)",
        "numberOfBytes": "32",
        "value": "t_struct(Snapshots)2133_storage"
      },
      "t_mapping(t_address,t_struct(Withdrawal)2113_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Mining3.Withdrawal)",
        "numberOfBytes": "32",
        "value": "t_struct(Withdrawal)2113_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Snapshots)2133_storage": {
        "encoding": "inplace",
        "label": "struct Mining3.Snapshots",
        "members": [
          {
            "astId": 2129,
            "contract": "contracts/Mining3.sol:Mining3",
            "label": "ids",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2132,
            "contract": "contracts/Mining3.sol:Mining3",
            "label": "values",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Withdrawal)2113_storage": {
        "encoding": "inplace",
        "label": "struct Mining3.Withdrawal",
        "members": [
          {
            "astId": 2110,
            "contract": "contracts/Mining3.sol:Mining3",
            "label": "snapshotId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2112,
            "contract": "contracts/Mining3.sol:Mining3",
            "label": "index",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}